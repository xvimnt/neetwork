// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
    provider = "prisma-client-js"
}

// Project models
model Course {
    id          String   @id @default(cuid())
    title       String
    imageUrl    String
    description String
    position    Int     @default(autoincrement())
    skills      String[]
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    sections  Section[]
    assignations Assignation[]
}

model Section {
    id          String   @id @default(cuid())
    title       String
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    position    Int     @default(autoincrement())
    course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
    lessons  Lesson[]
}

model Lesson {
    id          String   @id @default(cuid())
    title       String
    videoUrl    String
    position    Int @default(autoincrement())
    duration    Int
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    Section  Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    sectionId    String
}

model Assignation {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")
    completed   Boolean  @default(false)
    progress    Int      @default(0)
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    role          String?       @default("disabled")
    profession    String?
    accounts      Account[]
    sessions      Session[]
    createdAt   DateTime  @default(now()) @map("created_at")
    assignations Assignation[]
    courses      Course[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
